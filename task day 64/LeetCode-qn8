// LEET CODE PROBLEM 8 : https://leetcode.com/problems/string-to-integer-atoi


Using JavaScript

var myAtoi = function(s) {
    let x = "";
    let flag = 1;
    const INT32_MIN = -2147483648;
    const INT32_MAX = 2147483647;

    s = s.trimStart();
    if (/^[a-z]$/i.test(s[0]))
    {
        return 0;
    }
    if(s[0]=="-"||s[0]=="+")
    {
        if(s[0]=="-")
        {
            flag = -1;
        }
        s = s.slice(1)
    }
    s = s.replace(/^0+/, '');
    for(i=0;i<s.length;i++)
    {
        if(/^[0-9]$/.test(s[i]))
        {
            x += s[i]
        }
        else
        {
            break;
        }
    }
    x = Number(x)*flag;
    if (x < INT32_MIN)
    {
        return INT32_MIN;
    }
    else if (x > INT32_MAX)
    {
        return INT32_MAX;
    }
    else
    {
        return x;
    }
};

Using C#

public class Solution
{
    public int MyAtoi(string s)
    {
        const int INT32_MIN = -2147483648;
        const int INT32_MAX = 2147483647;
        
        // Trim leading whitespace
        s = s.TrimStart();
        
        if (string.IsNullOrEmpty(s))
        {
            return 0;
        }
        
        int flag = 1;
        int index = 0;
        
        // Check for sign
        if (s[index] == '-' || s[index] == '+')
        {
            flag = (s[index] == '-') ? -1 : 1;
            index++;
        }
        
        // Remove leading zeros
        while (index < s.Length && s[index] == '0')
        {
            index++;
        }
        
        // Handle case where the string becomes empty after removing leading zeros
        if (index == s.Length)
        {
            return 0;
        }
        
        // Convert to integer
        long result = 0;
        while (index < s.Length && char.IsDigit(s[index]))
        {
            result = result * 10 + (s[index] - '0');
            index++;
            
            // Check for overflow
            if (result * flag < INT32_MIN)
            {
                return INT32_MIN;
            }
            if (result * flag > INT32_MAX)
            {
                return INT32_MAX;
            }
        }
        
        return (int)(result * flag);
    }
}
